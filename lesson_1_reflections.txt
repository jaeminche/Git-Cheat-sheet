How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    Once you find some point in your memory where you did not have the bug, checkout that commit and the one after it and see which one is the one with the bug by executing the file. Then, you can put diff -u game_old.js game_new.js. to compare files and see the codes.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    Having easy access to the entire history of a file lets you be organized on every step you make the changes, and that lets your past works managable and lets you save your time finding exact commit you have made among a number of commits.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    Manually creating a commit would let you save your versions with some specific notes to them while it may require you some time to do that. Having versions automatically saved may let you save your time or effort but does not make your working process managable in the long run.

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    When changes over multiple files under a condition they share occur, you can save multiple files in one commit.

How can you use the commands git log and git diff to view the history of files?

    Use 'git log' to view the history of changes of files, and use 'git diff first_id second_id' to compare the two.

How might using version control make you more confident to make changes that
could break something?

    It is a risk taker! It lets you go back to the previous stage before any bugs may occur.

Now that you have your workspace set up, what do you want to try using Git for?

    Use repositories at Github.com.
